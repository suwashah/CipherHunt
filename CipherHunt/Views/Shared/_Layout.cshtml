<!DOCTYPE html>
<html lang="en">
<head>
    @Html.Partial("_Partial/_Head")
    @RenderSection("head", required: false)
    <style>
        img.lazy {
            background-image: url('../../images/Loader/lazy_loader.svg');
            background-repeat: no-repeat;
            background-position: 50% 50%;
        }

        .challenge-image {
            width: 100%; /* Fixed width */
            height: 300px; /* Fixed height */
            object-fit: cover; /* Ensures the image covers the area while keeping its aspect ratio */
            object-position: center; /* Centers the image within the container */
        }

        .ch-detail-text-red {
            color: #cc1616 !important;
        }
        /*header:before {*/
        /*box-shadow: 1px 1px 15px #000;*/
        /*}
        header:after {
             background: none !important;
        }
        .btn-login {
            height: 55px !important;
            line-height: 53px !important;
            color: #EF0031;
        }
        .btn-round {
            border-radius: 25px;
        }
        .btn-bg-none{
            background:none !important;
        }
        footer {
            background: #0d0d0d;
            text-align: left !important;
        }*/
    </style>
    <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.4.0/dist/confetti.browser.min.js"></script>

</head>
<body class="index-page" ng-app="Homeapp" ng-controller="ApplicationController" ng-init="AppConfig();">
    @Html.Partial("_Partial/_FbChatPlugin")
    <header id="header" class="header fixed-top">



        <div class="branding d-flex align-items-center">

            <div class="container position-relative d-flex align-items-center justify-content-between">

                @Html.Partial("_Partial/_Logo")
                <nav id="navmenu" class="navmenu">
                    @Html.Partial("_Partial/_UserMenu")
                    <i class="mobile-nav-toggle d-xl-none bi bi-list"></i>
                </nav>
            </div>

        </div>

        <div class="topbar d-flex align-items-center">
            <div class="container d-flex justify-content-center justify-content-md-between">
                <div class="contact-info d-flex align-items-center">
                    <!-- <i class="bi bi-envelope d-flex align-items-center"><a href="mailto:contact@cipherhunt.com">contact@cipherhunt.com</a></i>
                    <i class="bi bi-phone d-flex align-items-center ms-4"><span>+61 4xxxxx000</span></i> -->
                </div>
                <div class="social-links d-none d-md-flex align-items-center">
                    <a href="#" class="twitter"><i class="bi bi-twitter-x"></i></a>
                    <a href="#" class="facebook"><i class="bi bi-facebook"></i></a>
                    <a href="#" class="instagram"><i class="bi bi-instagram"></i></a>
                    <a href="#" class="linkedin"><i class="bi bi-linkedin"></i></a>
                </div>
            </div>
        </div><!-- End Top Bar -->

    </header>
    <main class="main">
        @RenderBody()
    </main>
    @Html.Partial("_Partial/_Footer")
    <!-- Scroll Top -->
    <a href="#" id="scroll-top" class="scroll-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>

    <!-- Preloader -->
    <div id="preloader"></div>
    @Html.Partial("_Partial/_ImportJs")
    <script src="~/Scripts/main.js"></script>
    @Html.Partial("_Partial/_ImportAngular")
    <script>
        $(function () {
            $('.lazy').lazy();
        });
        

        function randomInRange(min, max) {
            return Math.random() * (max - min) + min;
        }


        function celebrate() {
            const duration = 15 * 1000,
                animationEnd = Date.now() + duration,
                defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 };

            const interval = setInterval(function () {
                const timeLeft = animationEnd - Date.now();

                if (timeLeft <= 0) {
                    return clearInterval(interval);
                }

                const particleCount = 50 * (timeLeft / duration);

                // since particles fall down, start a bit higher than random
                confetti(
                    Object.assign({}, defaults, {
                        particleCount,
                        origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 },
                    })
                );
                confetti(
                    Object.assign({}, defaults, {
                        particleCount,
                        origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 },
                    })
                );
            }, 250);
        }
    </script>
    @RenderSection("scripts", required: false)
</body>
</html>
