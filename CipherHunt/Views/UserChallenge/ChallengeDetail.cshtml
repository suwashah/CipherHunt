@model CipherHunt.Models.ChallengeModel

@{
    ViewBag.Title = "ChallengeDetail";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    #countdownTimer {
        font-size: 24px;
        margin: 20px;
    }

    .running-state {
        color: green;
    }

    .stopped-state {
        color: red;
        font-size:18px;
    }
</style>
<!-- Service Details Section -->
<section id="service-details" class="service-details section mt-4">
    <div class="page-title dark-background" data-aos="fade">
        <div class="container">
            <nav class="breadcrumbs">
                <ol>
                    <li><a href="@Url.Action("Index","Home")">Home</a></li>
                    <li><a href="@Url.Action("Index", "UserChallenge")">CTF Challenges</a></li>
                    <li>@Html.DisplayFor(model => model.DIFFICULTY_LEVEL)</li>
                    <li>@Html.DisplayFor(model => model.CATEGORY_NAME)</li>
                    <li class="current">@Html.DisplayFor(model => model.NAME)</li>
                </ol>
            </nav>
        </div>
    </div><!-- End Page Title -->
    <div class="container">
        <div class="row gy-4">
            <div class="col-lg-4" data-aos="fade-up" data-aos-delay="100">
                <div class="services-list">
                    <a href="#" class="active">@Html.DisplayFor(model => model.DIFFICULTY_LEVEL) Challenge</a>
                    <a href="#" class="active">@Html.DisplayFor(model => model.CATEGORY_NAME)</a>
                    <a href="#">@Html.DisplayFor(model => model.POINTS) Points</a>
                    <a href="#"><span ch-detail-text-red">(Author)</span> @Html.DisplayFor(model => model.CREATE_BY)</a>
                    <a href="#">(Created) @Html.DisplayFor(model => model.CREATE_TS)</a>
                </div>

                <div>
                    @if (!String.IsNullOrEmpty(Model.CHALLENGE_URL))
                    {
                        <p>
                            This challenge launches an instance on demand.<br /><br />
                            Its current status is: <span id="instanceStatus" class="stopped-state">STOPPED</span><br />
                            Instance Time Remaining: <span id="countdownTimer">00:00</span>
                            <br /><br/>
                            <button id="startButton" class="btn btn-success">Start Instance</button>
                            <button id="stopButton" class="btn btn-danger" style="display: none;">Stop Instance</button>
                            <div id="ins_error_message" class="text-danger" style="display:none;"></div>
                        </p>
                        <hr />
                    }
                </div>

                <p><i class="ch-detail-text-red bi bi-check-circle"></i> <span><b class="ch-detail-text-red">Hints:</b> @Html.DisplayFor(model => model.HINT_1)</span></p>
                <section id="contact" class="contact section">
                    <form action="" method="post" class="php-email-form" id="flag-submit-form" data-aos="fade-up" data-aos-delay="400">
                        <div class="row gy-4">
                            <div class="col-md-12">
                                <h4><i class="bi bi-trophy"></i> Submit to get @Html.DisplayFor(model => model.POINTS) Points</h4>
                            </div>
                            <div class="col-md-12">
                                <input type="text" class="form-control" name="UserFlag" id="UserFlag" placeholder="flag{FLAG}" required>
                            </div>
                            <div class="col-md-12 text-center">
                                <div class="loading" style="display:none;">Loading</div>
                                <div class="error-message" style="display:none;"></div>
                                <div class="sent-message" style="display:none;">Your message has been sent. Thank you!</div>
                                <button type="submit"><i class="bi bi-flag-fill"></i> Submit Flag</button>
                            </div>
                        </div>
                    </form>

                </section>
            </div>

            <div class="col-lg-8" data-aos="fade-up" data-aos-delay="200">
                @if (String.IsNullOrEmpty(Model.ImageSrc))
                {
                    <img src="@Url.Content("~/images/Content/challenge-placeholder.jpg")" alt="" style="height:500px !important;" class="challenge-image mb-4" data-aos="zoom-in-down" data-aos-delay="200">

                }
                else
                {
                    <img src="@Model.ImageSrc" alt="" style="height:500px !important;" class="challenge-image mb-4" data-aos="zoom-in-down" data-aos-delay="200">
                }
                <h3>@Html.DisplayFor(model => model.NAME)</h3>
                <p>
                    @Html.Raw(Model.DESCRIPTION)
                </p>
                <br/>
                @if (!String.IsNullOrEmpty(Model.CHALLENGE_URL))
                {
                    <p id="instance_link">
                    </p>
                }
                @if (!String.IsNullOrEmpty(Model.FILE_PATH))
                {
                    <p>
                         <a target="_blank" href="@Url.Content("~/Uploads/Files/"+Model.FILE_PATH)" download><i class="bi bi-download"></i> Download this file</a> and find the flag!
                    </p>
                }
            </div>

        </div>

    </div>

</section><!-- /Service Details Section -->

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    let countdownActive = false; 
    $(document).ready(function () {
        const challengeId = '@Html.DisplayFor(model => model.CHALLENGE_ID)';
        $('#flag-submit-form').on('submit', function (e) {
            e.preventDefault(); 

            // Hide previous messages
            $('.loading').show();
            $('.error-message').hide();
            $('.sent-message').hide();
            // Collect data
            const userFlag = $('#UserFlag').val();
            $.ajax({
                url: '@Url.Action("SubmitFlag", "UserChallenge")',
                type: 'POST',
                data: {
                    USER_FLAG: userFlag,
                    CHALLENGE_ID: challengeId
                },
                success: function (response) {
                    $('.loading').hide();
                    console.log(response);
                    if (response.CODE === "0") {
                        $('.sent-message').text(response.MESSAGE).show(); 
                        celebrate();
                    } else {
                        $('.error-message').text(response.MESSAGE).show(); 
                    }
                },
                error: function () {
                    $('.loading').hide();
                    $('.error-message').text('An error occurred. Please try again later.').show();
                }
            });
        });

        const totalTime = 30 * 60; // Total time in seconds (30 minutes)
        let countdownInterval;

        // Store selectors in variables
        const $startButton = $('#startButton');
        const $stopButton = $('#stopButton');
        const $instanceStatus = $('#instanceStatus');
        const $countdownTimer = $('#countdownTimer');
        const $instanceErrorMessage = $('#ins_error_message');
        const $instanceLink = $('#instance_link');

        var diff = '@Html.DisplayFor(model => model.DIFFICULTY_LEVEL)';
        const folderName = '@Html.DisplayFor(model => model.CHALLENGE_FOLDER)'.replace(/\s+/g, '');
        $startButton.on('click', function (e) {
            e.preventDefault(); 
            $instanceErrorMessage.hide();
            $startButton.text('Instance starting...');
            $startButton.prop('disabled', true);
            $.ajax({
                url: '@Url.Action("StartDockerInstance", "UserChallenge")', 
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({
                    difficulty: diff,
                    foldername: folderName
                }),
                success: function (response) {
                    console.log(response);
                    setTimeout(function () {
                        startInstance();
                    }, 10000); // 10 seconds delay
                },
                error: function (response) {
                    stopInstance();
                    $instanceErrorMessage.text('An error occurred. Please try again later.').show();
                }
            });
        });

        $stopButton.on('click', function (e) {
            e.preventDefault(); 
            $instanceErrorMessage.hide();
            $startButton.text('Instance stopping...');
            $startButton.prop('disabled', true);
            $.ajax({
                url: '@Url.Action("StopDockerInstance", "UserChallenge")', 
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({
                    difficulty: diff,
                    foldername: folderName
                }),
                success: function (response) {
                    console.log(response);
                    setTimeout(function () {
                        stopInstance();
                    }, 10000); // 10 seconds delay
                },
                error: function (response) {
                    $instanceErrorMessage.text('An error occurred. Please try again later.').show();
                }
            });
        });

        function startInstance() {
            // Set the running state and total time in local storage
            localStorage.setItem(challengeId+"_instanceState", "running");
            localStorage.setItem(challengeId+"_remainingTime", totalTime);
            $instanceStatus.text("RUNNING").removeClass("stopped-state").addClass("running-state");
            showChallengeLink();
            // Show/Hide buttons
            $startButton.text('Start Instance');
            $startButton.prop('disabled', false);
            $startButton.hide();
            $stopButton.show();

            startCountdown(totalTime);
        }

        function stopInstance() {
            // Clear local storage and stop the countdown
            localStorage.removeItem(challengeId +"_instanceState");
            localStorage.removeItem(challengeId +"_remainingTime");
            $instanceStatus.text("STOPPED").removeClass("running-state").addClass("stopped-state");
            $instanceLink.text("");
            clearInterval(countdownInterval);
            $countdownTimer.text("00:00"); // Reset timer display

            // Show/Hide buttons
            $startButton.text('Start Instance');
            $startButton.prop('disabled', false);

            $startButton.show();
            $stopButton.hide();
            //$instanceErrorMessage.text('An error occurred. Please try again later.').show();
        }

        function startCountdown(duration) {
            let timer = duration;

            // Clear any existing interval to prevent multiple timers
            clearInterval(countdownInterval);

            countdownInterval = setInterval(function () {
                const minutes = parseInt(timer / 60, 10);
                const seconds = parseInt(timer % 60, 10);

                $countdownTimer.text((minutes < 10 ? "0" : "") + minutes + ":" + (seconds < 10 ? "0" : "") + seconds);

                if (--timer < 0) {
                    clearInterval(countdownInterval);
                    stopInstance(); // Stop the instance when timer reaches zero
                } else {
                    localStorage.setItem(challengeId +"_remainingTime", timer); // Update remaining time in local storage
                }
            }, 1000);
        }

        // On page load, check local storage and restore state if necessary
        const instanceState = localStorage.getItem(challengeId +"_instanceState");
        const remainingTime = parseInt(localStorage.getItem(challengeId +"_remainingTime"), 10);

        if (instanceState === "running" && !isNaN(remainingTime)) {
            $instanceStatus.text("RUNNING").removeClass("stopped-state").addClass("running-state");
            startCountdown(remainingTime);
            showChallengeLink();
            // Show/Hide buttons
            $startButton.hide();
            $stopButton.show();
        } else {
            $instanceStatus.text("STOPPED").removeClass("running-state").addClass("stopped-state");
            $instanceLink.text("");
            // Show/Hide buttons
            $startButton.show();
            $stopButton.hide();
        }
        function showChallengeLink() {
            document.getElementById('instance_link').innerHTML = 'Browse <a target="_blank" href="' + '@Model.CHALLENGE_URL' + '">here</a> and find the flag!';
        }
});

</script>
